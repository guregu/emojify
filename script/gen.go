package main

import (
	"cmp"
	"fmt"
	"os"
	"path/filepath"
	"slices"
	"strconv"
	"strings"

	"golang.org/x/net/html"
)

var version string

func main() {
	version = os.Args[1]
	files, err := os.ReadDir(filepath.Join("twemoji", "assets", "svg"))
	if err != nil {
		panic(err)
	}
	filenames := make([]string, 0, len(files)+len(aliases))
	for _, entry := range files {
		if entry.IsDir() {
			continue
		}
		name := entry.Name()
		if filepath.Ext(name) != ".svg" {
			continue
		}
		filenames = append(filenames, entry.Name())
	}
	for alias := range aliases {
		filenames = append(filenames, alias)
	}
	slices.SortFunc(filenames, properly)
	data := make([]emojiData, 0, len(filenames))
	for _, name := range filenames {
		text := parseName(name)
		info := emojiData{
			str: text,
			img: name,
		}
		if alias, ok := aliases[info.img]; ok {
			info.img = alias
		}
		data = append(data, info)
	}
	writeCode(data)
}

func writeCode(emojis []emojiData) {
	fmt.Println("// Code generated by go generate; DO NOT EDIT.")
	fmt.Println()
	fmt.Println("package emojify")
	fmt.Println()
	fmt.Println("// Version is the Twemoji library version.")
	fmt.Printf("const Version = %q\n", version)
	fmt.Println()
	fmt.Println("var twemojiData = []resource{")
	for _, emoji := range emojis {
		fmt.Printf("\t{str: %q, img: %q},\n", emoji.str, emoji.img)
	}
	fmt.Println("}")
}

type emojiData struct {
	str  string
	img  string
	node *html.Node
}

func properly(a, b string) int {
	if n := cmp.Compare(len(b), len(a)); n != 0 {
		return n
	}
	return cmp.Compare(a, b)
}

// alias of actual unicode â†’ twemoji file name
// sequences with fe0f are missing in upstream?
var aliases = map[string]string{
	"23-fe0f-20e3.svg": "23-20e3.svg",
	"2a-fe0f-20e3.svg": "2a-20e3.svg",
	"30-fe0f-20e3.svg": "30-20e3.svg",
	"31-fe0f-20e3.svg": "31-20e3.svg",
	"32-fe0f-20e3.svg": "32-20e3.svg",
	"33-fe0f-20e3.svg": "33-20e3.svg",
	"34-fe0f-20e3.svg": "34-20e3.svg",
	"35-fe0f-20e3.svg": "35-20e3.svg",
	"36-fe0f-20e3.svg": "36-20e3.svg",
	"37-fe0f-20e3.svg": "37-20e3.svg",
	"38-fe0f-20e3.svg": "38-20e3.svg",
	"39-fe0f-20e3.svg": "39-20e3.svg",
}

func parseName(base string) string {
	ext := filepath.Ext(base)
	filename := base[:len(base)-len(ext)]
	hexes := strings.Split(filename, "-")
	runes := make([]rune, len(hexes))
	for i, hex := range hexes {
		n, err := strconv.ParseInt(hex, 16, 64)
		if err != nil {
			panic(err)
		}
		runes[i] = rune(n)
	}
	text := string(runes)
	return text
}
